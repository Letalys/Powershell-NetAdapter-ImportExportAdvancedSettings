<#
.SYNOPSIS
  This script can be use for Import NetAdapter AdvancedSetting from XML format
.DESCRIPTION
  Using NetAdapter Module, create a import object from XML. XML is generated by the script NetAdapter-ExportAdvSettings.ps1.
  Must be used in console UI. Need administrator rights.
.PARAMETER ImportXMLFile
    Specifies the XML file path to import. If this parameter is not configured, an open file window will be displayed.
    If it's set, you can use this script in silent mode.
               Required?                    false
               Default value                null
               Accept pipeline input?       false
               Accept wildcard characters?  false
.NOTES
  Version:        2.0
  Author:         Letalys
  Creation Date:  19/02/2023
  Purpose/Change: Initial script development
#>

Param([String]$ImportXMLArgs)

$LogDir="C:\NetAdapterImports"

if((Test-Path $LogDir) -eq $false){
    New-Item -Path $LogDir -ItemType Directory -ErrorAction Stop
}

Function Get-RegistryClassPath{
    param(
        [Parameter(Mandatory=$true)][String]$Class
	)

    write-host ""
    Write-Host -NoNewLine -ForegroundColor Yellow "Searching for $Class GUID :"

    $ParentClassKey = "HKLM:\SYSTEM\CurrentControlSet\Control\Class"
    $NetClassGUID = Get-ChildItem -Path $ParentClassKey | Get-ItemProperty -Name "Class" -ErrorAction SilentlyContinue | Where-Object {$_.class -eq "$Class"}

    if($null -ne $NetClassGUID){
        Write-Host -ForegroundColor Green $NetClassGUID.PSChildName

        $ParentNetClassKey =  Join-Path -Path $ParentClassKey -ChildPath $NetClassGUID.PSChildName

        return $ParentNetClassKey
    }
}

$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -eq $false){

    Write-Host -ForegroundColor Red "This script requires elevation of privilege to run."

    if($ImportXMLArgs -ne ""){
        $ReExecutionArgs = "-File `"$($myinvocation.mycommand.definition)`" -ImportXMLArgs `"$($ImportXMLArgs)`""
    }else{
        $ReExecutionArgs = "-File `"$($myinvocation.mycommand.definition)`""
    }

    Try{
        Start-Process powershell -Verb runAs -ArgumentList "$ReExecutionArgs" -ErrorAction SilentlyContinue
    }Catch{
        Write-host -ForegroundColor Red $_
        exit
    }

    Break
}

Add-Type -AssemblyName System.Windows.Forms

Clear-Host
Write-Host -ForegroundColor Cyan "------------------------------------------------------------"
Write-Host -ForegroundColor Cyan "       NetAdapter Advanced Settings Importing   v2          "
Write-Host -ForegroundColor Cyan "------------------------------------------------------------"
Write-Host ""


if($ImportXMLArgs -ne ""){
    Write-Host -ForegroundColor cyan "Process Commandline."

    if(Test-Path -Path $ImportXMLArgs){
        $CurrentFile = Get-Item $ImportXMLArgs -ErrorAction SilentlyContinue
    }else{
        Write-Host -ForegroundColor Red "Specified file not found"
    }
}else{
    Write-Host -ForegroundColor cyan "Process console mode"

    #Sélection du fichier de configuration
    $FileBrowser = New-Object System.Windows.Forms.OpenFileDialog -Property @{ 
        Filter = 'XML (*.xml)|*.xml'
        RestoreDirectory = $true
        Title ="Choose the configuration file to import"
        Multiselect =$false
    }

    $null = $FileBrowser.ShowDialog()

    $FileBrowsed = $FileBrowser.FileName
    $CurrentFile = Get-Item $FileBrowsed -ErrorAction SilentlyContinue
}

if($null -ne $CurrentFile){
    Write-Host -NoNewLine -ForegroundColor Yellow "Loading file"
    Write-Host -NoNewLine  "$($CurrentFile.Name) "
    Write-Host -NoNewLine -ForegroundColor Yellow ": "

    [xml]$NetAdapterImport = Get-Content $CurrentFile.FullName
    Write-Host -ForegroundColor Green "OK"

    #Affichage des information des cartes
    Write-Host ""
    Write-Host -NoNewLine -ForegroundColor Yellow "Availabled NetworkAdapter :"

    $NetAdpterList = Get-WMIObject Win32_NetworkAdapter -Filter "PhysicalAdapter='True'" | Select-Object DeviceID, Name, ServiceName
    $NetAdpterList | Format-Table -AutoSize
    
    Write-Host ""
    Write-Host -NoNewLine -ForegroundColor Yellow "Linked Drivers list (Wait) :"
    [System.Collections.ArrayList]$DriversTab =@()
    Foreach($na in $NetAdpterList){
       $Drv = Get-WMIObject Win32_PnpSignedDriver -Filter "DeviceName='$($na.Name)'" | Select-Object DeviceName,DriverVersion,DriverDate,infName 
       $DriversTab.Add($Drv) |Out-Null
    }
    $DriversTab | Format-Table


    Write-Host -NoNewLine -ForegroundColor Yellow "Checking the presence of the network adapter specified in XML File : "

    $NetAdapter = Get-WMIObject Win32_NetworkAdapter -Filter "Name='$($NetAdapterImport.NetAdapterExport.NetAdapterInformations.Name)' AND PhysicalAdapter='True'"

    Switch($true){
        ($null -eq $NetAdapter){
            Write-Host -ForegroundColor Red "No matches found"
            $CheckCard = $false
            Break;
        }
        ($($NetAdapter | Measure-Object).count -eq 1){
            Write-Host -ForegroundColor Green "Match found"

            $GUIDClass = Get-RegistryClassPath -Class NET

            #Récupération de l'index au format XXXX
            $SelectedIndexFormated = $NetAdapter.DeviceID
            While($SelectedIndexFormated.Length -ne 4){
                $SelectedIndexFormated = "0$SelectedIndexFormated"
            }

             Write-Host -NoNewline -Foreground Yellow "`t Real Index : "
             Write-Host $SelectedIndexFormated

             $RegistryAdapterPath = Join-Path -Path $GUIDClass -ChildPath $SelectedIndexFormated

             Write-Host -NoNewline -Foreground Yellow "`t Registry : "
             Write-Host $RegistryAdapterPath

            $CheckCard = $true
            Break;
        }
        ($($NetAdapter | Measure-Object).count -gt 1){
            Write-Host -ForegroundColor Red "Multiple matches found, unable to continue."
            $CheckCard = $false
            Break;
        }
    }

    $NetAdapterDriverList = Get-WMIObject Win32_PnpSignedDriver -Filter "DeviceName='$($NetAdapterImport.NetAdapterExport.NetAdapterInformations.Name)'" | Select-Object DeviceName,DriverVersion,DriverDate,infName 

    If($CheckCard -eq $true){
        Write-Host ""
        Write-Host -NoNewLine -ForegroundColor Yellow "Checking the driver version specified in XML File : "

        If($NetAdapterDriverList.DriverVersion -eq "$($NetAdapterImport.NetAdapterExport.NetAdapterInformations.DriverInfos.Version)"){
            Write-Host -ForegroundColor Green "Match found"
            $CheckVersion = $true

        }else{
            Write-Host -ForegroundColor Green "Drivers Versions do not match"
            $CheckVersion =$false
        }
    }

    Write-Host ""
    if(($CheckCard -eq $true) -and ($CheckVersion -eq $true)){
         Write-Host -ForegroundColor Yellow "Import settings : "

         foreach($p in $NetAdapterImport.NetAdapterExport.NetAdapterInformations.AdapterConfiguration.Param){
            Write-Host -NoNewline "`t $($p.DisplayName) : "
            Try{
                #Set-ItemProperty -InterfaceDescription $NetAdapterList.InterfaceDescription -RegistryKeyword "$($p.GetAttribute("RegistryKeyWord"))" -DisplayValue $($p.DisplayValue)
                Set-ItemProperty -Path $RegistryAdapterPath -Name $p.GetAttribute("RegistryKeyWord") -Value $p.GetAttribute("RegistryValue")
                Write-Host -ForegroundColor Green "Applied"
            }Catch{
                Write-Host -ForegroundColor Red "Fail : $_"
            }

         }
    }else{
        Write-Error "No Match - Check if the computer has a compatible card and a compatible driver version"
        exit 1
    }
   
    Write-Host ""
    Write-Host -ForegroundColor Yellow "Import Completed."

    Write-Host ""
    Write-Host -NoNewLine -ForegroundColor Yellow "Rebooting NetworkAdapter : "
    try{
        $NetAdapter.Disable() |Out-Null
        $NetAdapter.Enable() |Out-Null

        Write-Host -ForegroundColor Green "Completed"
    }Catch{
        Write-Error $_
    }
   

    $LogFileName="$($CurrentFile.BaseName).Import.OK"
    New-Item -Path $LogDir -ItemType File -Name $LogFileName -Force -ErrorAction Stop | Out-Null
    
    exit 0

}else{
    Write-Host -ForegroundColor "Red" "Le fichier n'a pas pu être chargé"
    Write-Error "Le fichier $ImportXMLArgs n'a pu être chargé."
    exit 1
}
if($ImportXMLArgs -eq ""){
    pause
}
#pause